{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the ForumJS API documentation. This API allows you to interact with the ForumJS application, enabling you to manage users, threads, comments, and votes.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Users: Register, login, view, and manage user profiles.</li> <li>Threads: Create, view, and interact with discussion threads.</li> <li>Comments: Add, view, and manage comments on threads.</li> <li>Votes: Upvote or downvote threads and comments to influence their visibility.</li> <li>Leaderboards: View rankings of top users based on their activity and scores.</li> </ul>"},{"location":"#how-to-get-started","title":"How to Get Started","text":"<p>To get started with the ForumJS API, follow these steps:</p> <ol> <li> <p>Obtain API Credentials: Sign up or log in to the ForumJS application to get your API credentials (e.g., API key or token).</p> </li> <li> <p>Explore Endpoints: Review the available API endpoints to understand the operations you can perform. Refer to the \"Endpoints\" section for detailed information on each API call.</p> </li> <li> <p>Make API Requests: Use your API credentials to make requests to the API endpoints. You can use tools like cURL or Postman for testing, or integrate the API into your application using your preferred programming language.</p> </li> <li> <p>Handle Responses: Understand the structure of the API responses to effectively handle the data returned by the API. Check the \"Response\" sections for examples of the expected responses.</p> </li> <li> <p>Check the Documentation: For detailed information on request formats, parameters, and response structures, refer to the respective sections in this documentation.</p> </li> </ol> <p>Feel free to reach out to our support team if you have any questions or need further assistance.</p>"},{"location":"API/1-users/","title":"Users","text":"<p>Users are the individuals who participate in the platform. This section covers how to manage and interact with users.</p>"},{"location":"API/1-users/#register","title":"Register","text":"<p>URL: <code>/register</code> Method: <code>POST</code> Request Body:</p> <pre><code>{\n  \"name\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\" // Must be at least 6 characters long\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"User created\",\n  \"data\": {\n    \"user\": {\n      \"id\": \"user-123\",\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"avatar\": \"https://generated-image-url.jpg\"\n    }\n  }\n}\n</code></pre>"},{"location":"API/1-users/#login","title":"Login","text":"<p>URL: <code>/login</code> Method: <code>POST</code> Request Body:</p> <pre><code>{\n  \"email\": \"string\",\n  \"password\": \"string\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"ok\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRpbWFzMiIsIm5hbWUiOiJEaW1hcyBTYXB1dHJhIiwicGhvdG8iOiJodHRwczovL3VpLWF2YXRhcnMuY29tL2FwaS8_bmFtZT1EaW1hcyBTYXB1dHJhJmJhY2tncm91bmQ9cmFuZG9tIiwiaXNfcGVybWFuZW50IjpmYWxzZSwiaWF0IjoxNjYzODQwNzY0fQ._HrzpinFYX_m9WfvM-lGCdVrnhnaGHhzt1e6eATE1Iw\"\n  }\n}\n</code></pre>"},{"location":"API/1-users/#see-all-users","title":"See All Users","text":"<p>URL: <code>/users</code> Method: <code>GET</code> Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"ok\",\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"john_doe\",\n        \"name\": \"John Doe\",\n        \"email\": \"john@example.com\",\n        \"avatar\": \"https://generated-image-url.jpg\"\n      },\n      {\n        \"id\": \"jane_doe\",\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@example.com\",\n        \"avatar\": \"https://generated-image-url.jpg\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"API/1-users/#see-own-profile","title":"See Own Profile","text":"<p>URL: <code>/users/me</code> Method: <code>GET</code> Headers:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"ok\",\n  \"data\": {\n    \"user\": {\n      \"id\": \"john_doe\",\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"avatar\": \"https://generated-image-url.jpg\"\n    }\n  }\n}\n</code></pre> <p>Additional Information:</p> <ul> <li>Register User: Provides information on how to register a new user, including the URL, method, request body format, and example response.</li> <li>Login: Explains how to log in to obtain an access token.</li> <li>See All Users: Provides an endpoint to view a list of all users.</li> <li>See Own Profile: Provides an endpoint to view the profile of the currently logged-in user with authentication header.</li> </ul>"},{"location":"API/2-threads/","title":"Threads","text":"<p>Threads are discussion topics created by users. This section describes how to create, view, and manage threads.</p>"},{"location":"API/2-threads/#create-thread","title":"Create Thread","text":"<ul> <li>URL: <code>/threads</code></li> <li>Method: <code>POST</code></li> <li>Headers:</li> <li><code>Authorization: Bearer &lt;token&gt;</code></li> <li>Request Body:</li> <li><code>title</code>: string, required. The title of the thread.</li> <li><code>body</code>: string, required. The content of the thread.</li> <li><code>category</code>: string (optional). The category of the thread.</li> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Thread created\",\n  \"data\": {\n    \"thread\": {\n      \"id\": \"thread-1\",\n      \"title\": \"First Thread\",\n      \"body\": \"This is the first thread\",\n      \"category\": \"General\",\n      \"createdAt\": \"2024-08-21T07:00:00.000Z\",\n      \"ownerId\": \"users-1\",\n      \"upVotesBy\": [],\n      \"downVotesBy\": [],\n      \"totalComments\": 0\n    }\n  }\n}\n</code></pre> <ul> <li>Additional Information:</li> <li>Authorization: You need to provide a valid Bearer token in the <code>Authorization</code> header.</li> <li>Success Status: <code>\"status\": \"success\"</code></li> <li>Error Status: If the request fails, an appropriate error message will be returned.</li> </ul>"},{"location":"API/2-threads/#see-all-threads","title":"See All Threads","text":"<ul> <li>URL: <code>/threads</code></li> <li>Method: <code>GET</code></li> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"ok\",\n  \"data\": {\n    \"threads\": [\n      {\n        \"id\": \"thread-1\",\n        \"title\": \"First Thread\",\n        \"body\": \"This is the first thread\",\n        \"category\": \"General\",\n        \"createdAt\": \"2024-08-21T07:00:00.000Z\",\n        \"ownerId\": \"users-1\",\n        \"upVotesBy\": [],\n        \"downVotesBy\": [],\n        \"totalComments\": 0\n      },\n      {\n        \"id\": \"thread-2\",\n        \"title\": \"Second Thread\",\n        \"body\": \"This is the second thread\",\n        \"category\": \"General\",\n        \"createdAt\": \"2024-08-21T07:00:00.000Z\",\n        \"ownerId\": \"users-2\",\n        \"upVotesBy\": [],\n        \"downVotesBy\": [],\n        \"totalComments\": 0\n      }\n    ]\n  }\n}\n</code></pre> <ul> <li>Additional Information:</li> <li>Authorization: Not required for this endpoint.</li> <li>Pagination: If there are many threads, pagination might be needed. This API does not provide pagination for this endpoint.</li> </ul>"},{"location":"API/2-threads/#see-detail-thread","title":"See Detail Thread","text":"<ul> <li>URL: <code>/threads/&lt;threadId&gt;</code></li> <li>Method: <code>GET</code></li> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"ok\",\n  \"data\": {\n    \"detailThread\": {\n      \"id\": \"thread-1\",\n      \"title\": \"First Thread\",\n      \"body\": \"This is the first thread\",\n      \"category\": \"General\",\n      \"createdAt\": \"2024-08-21T07:00:00.000Z\",\n      \"owner\": {\n        \"id\": \"users-1\",\n        \"name\": \"John Doe\",\n        \"avatar\": \"https://generated-image-url.jpg\"\n      },\n      \"upVotesBy\": [],\n      \"downVotesBy\": [],\n      \"comments\": [\n        {\n          \"id\": \"comment-1\",\n          \"content\": \"This is the first comment\",\n          \"createdAt\": \"2024-08-21T07:00:00.000Z\",\n          \"owner\": {\n            \"id\": \"users-1\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"https://generated-image-url.jpg\"\n          },\n          \"upVotesBy\": [],\n          \"downVotesBy\": []\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>Additional Information:</p> <ul> <li>Authorization: Not required for this endpoint.</li> <li>Comments: Includes comments related to the thread.</li> <li>Error Handling: If the thread ID does not exist, an appropriate error message will be returned.</li> </ul>"},{"location":"API/3-comments/","title":"Comments","text":"<p>Comments are responses made to threads or other comments. This section describes how to manage comments.</p>"},{"location":"API/3-comments/#create-comment","title":"Create Comment","text":"<p>URL <code>/threads/&lt;threadId&gt;/comments</code></p> <p>Method <code>POST</code></p> <p>Headers <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body </p> <pre><code>{\n    \"content\": \"string\"\n}\n</code></pre> <p>Response </p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Comment created\",\n    \"data\": {\n        \"comment\": {\n            \"id\": \"comment-1\",\n            \"content\": \"This is the first comment\",\n            \"createdAt\": \"2024-08-21T07:00:00.000Z\",\n            \"upVotesBy\": [],\n            \"downVotesBy\": [],\n            \"owner\": {\n                \"id\": \"users-1\",\n                \"name\": \"John Doe\",\n                \"email\": \"john@example.com\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"API/4-votes/","title":"Votes","text":"<p>Votes are used to upvote or downvote a thread or comment.</p> <p>Notes:</p> <ul> <li>The <code>voteType</code> value can be:</li> <li><code>1</code> for up-vote</li> <li><code>0</code> for neutral</li> <li><code>-1</code> for down-vote</li> </ul>"},{"location":"API/4-votes/#up-vote-thread","title":"Up-vote Thread","text":"<p>URL <code>/threads/&lt;threadId&gt;/up-vote</code></p> <p>Method <code>POST</code></p> <p>Headers <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Response </p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Thread upvoted\",\n    \"data\": {\n        \"vote\": {\n            \"id\": \"vote-1\",\n            \"userId\": \"users-1\",\n            \"threadId\": \"thread-1\",\n            \"voteType\": 1\n        }\n    }\n}\n</code></pre>"},{"location":"API/4-votes/#down-vote-thread","title":"Down-vote Thread","text":"<p>URL <code>/threads/&lt;threadId&gt;/down-vote</code></p> <p>Method <code>POST</code></p> <p>Headers <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Response </p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Thread downvoted\",\n    \"data\": {\n        \"vote\": {\n            \"id\": \"vote-1\",\n            \"userId\": \"users-1\",\n            \"threadId\": \"thread-1\",\n            \"voteType\": -1\n        }\n    }\n}\n</code></pre>"},{"location":"API/4-votes/#neutralize-thread-vote","title":"Neutralize Thread Vote","text":"<p>URL <code>/threads/&lt;threadId&gt;/neutral-vote</code></p> <p>Method <code>POST</code></p> <p>Headers <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Response </p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Thread vote neutralized\",\n    \"data\": {\n        \"vote\": {\n            \"id\": \"vote-1\",\n            \"userId\": \"users-1\",\n            \"threadId\": \"thread-1\",\n            \"voteType\": 0\n        }\n    }\n}\n</code></pre>"},{"location":"API/4-votes/#up-vote-comment","title":"Up-vote Comment","text":"<p>URL <code>/threads/&lt;threadId&gt;/comments/&lt;commentId&gt;/up-vote</code></p> <p>Method <code>POST</code></p> <p>Headers <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Response </p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Comment upvoted\",\n    \"data\": {\n        \"vote\": {\n            \"id\": \"vote-1\",\n            \"userId\": \"users-1\",\n            \"commentId\": \"comment-1\",\n            \"voteType\": 1\n        }\n    }\n}\n</code></pre>"},{"location":"API/4-votes/#down-vote-comment","title":"Down-vote Comment","text":"<p>URL <code>/threads/&lt;threadId&gt;/comments/&lt;commentId&gt;/down-vote</code></p> <p>Method <code>POST</code></p> <p>Headers <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Response </p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Comment downvoted\",\n    \"data\": {\n        \"vote\": {\n            \"id\": \"vote-1\",\n            \"userId\": \"users-1\",\n            \"commentId\": \"comment-1\",\n            \"voteType\": -1\n        }\n    }\n}\n</code></pre>"},{"location":"API/4-votes/#neutralize-comment-vote","title":"Neutralize Comment Vote","text":"<p>URL <code>/threads/&lt;threadId&gt;/comments/&lt;commentId&gt;/neutral-vote</code></p> <p>Method <code>POST</code></p> <p>Headers <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Response </p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Comment vote neutralized\",\n    \"data\": {\n        \"vote\": {\n            \"id\": \"vote-1\",\n            \"userId\": \"users-1\",\n            \"commentId\": \"comment-1\",\n            \"voteType\": 0\n        }\n    }\n}\n</code></pre>"},{"location":"API/5-leaderboards/","title":"Leaderboards","text":"<p>Leaderboards are used to see the top users with the highest scores.</p>"},{"location":"API/5-leaderboards/#see-leaderboards","title":"See Leaderboards","text":"<p>URL <code>/leaderboards</code></p> <p>Method <code>GET</code></p> <p>Response </p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"ok\",\n    \"data\": {\n        \"leaderboards\": [\n            {\n                \"user\": {\n                    \"id\": \"users-1\",\n                    \"name\": \"John Doe\",\n                    \"email\": \"john@example.com\",\n                    \"avatar\": \"https://generated-image-url.jpg\"\n                },\n                \"score\": 10\n            },\n            {\n                \"user\": {\n                    \"id\": \"users-2\",\n                    \"name\": \"Jane Doe\",\n                    \"email\": \"jane@example.com\",\n                    \"avatar\": \"https://generated-image-url.jpg\"\n                },\n                \"score\": 5\n            }\n        ]\n    }\n}\n</code></pre>"}]}